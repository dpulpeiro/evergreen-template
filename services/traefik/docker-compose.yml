version: "3.9"

volumes:
  certs:
    name: certs

networks:
  traefik-public:
    name: traefik-public
    external: true

services:
  traefik:
    image: traefik:latest
    command:
      # Tell Traefik to discover containers using the Docker API
      - --providers.docker=true
      - --providers.docker.swarmMode=true
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=traefik-public

      # Enable the Trafik dashboard
      - --api.dashboard=true
      - --accesslog=true
      # Enable the Prometheus metrics
      - --metrics.prometheus=true
      - --metrics.prometheus.entryPoint=metrics
      - --entryPoints.metrics.address=:8082
      # Set up LetsEncrypt
      - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.letsencrypt.acme.email=${CLOUDFLARE_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      # Set up an insecure listener that redirects all traffic to TLS
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.websecure.address=:443
      # Set up the TLS configuration for our websecure listener
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.certResolver=letsencrypt
      - --entrypoints.websecure.http.tls.domains[0].main=<yourdomain.tld>
      - --entrypoints.websecure.http.tls.domains[0].sans=*.<yourdomain.tld>
#      - --experimental.plugins.cloudflarewarp.modulename=github.com/BetterCorp/cloudflarewarp
#      - --experimental.plugins.cloudflarewarp.version=v1.3.0


    environment:
      - CLOUDFLARE_EMAIL=${CLOUDFLARE_EMAIL}
      - CLOUDFLARE_DNS_API_TOKEN=${CLOUDFLARE_DNS_API_TOKEN}
    ports:
      - 80:80
      - 443:443
    networks:
      - service
      - traefik-public
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - certs:/letsencrypt
    labels:
      - "logging=traefik"
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.dashboard.rule=Host(`traefik.<yourdomain.tld>`)
        - traefik.http.routers.dashboard.entrypoints=websecure
        - traefik.http.routers.dashboard.tls.certresolver=letsencrypt
        - traefik.http.routers.dashboard.service=api@internal
        - traefik.http.services.dashboard.loadbalancer.server.port=8080
      replicas: 1
      update_config:
        parallelism: 2
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.role==manager